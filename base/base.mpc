import time
import sys
import math
import warnings
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.utils.multiclass import type_of_target
from sklearn.base import BaseEstimator, ClassifierMixin

from Compiler import mpc_math, ml

# -------------------------------- METRICS --------------------------------

def calculate_metrics(y_test, y_pred, positive_label=0, plain_test = True):
    true_positive_arr = Array(len(y_test), sint)
    false_positive_arr = Array(len(y_test), sint)
    false_negative_arr = Array(len(y_test), sint)

    if (plain_test): # Test is a normal python public array. Transform to secret shared to compare
        y_testing = y_test
        y_test = Array(len(y_testing), sint)
        y_test.assign(y_testing)
    @for_range(len(y_test))
    def f(i):
        y_t = y_test[i].reveal()
        y_p = y_pred[i].reveal()
        true_positive_arr[i] = ((y_p == positive_label) & (y_t == positive_label)).if_else(1,0)
        false_positive_arr[i] = ((y_p == positive_label) & (y_t != positive_label)).if_else(1,0)
        false_negative_arr[i] = ((y_p != positive_label) & (y_t == positive_label)).if_else(1,0)

    true_positive = sum(true_positive_arr)
    false_positive = sum(false_positive_arr)
    false_negative = sum(false_negative_arr)


    precision = (true_positive + false_positive != 0).if_else(true_positive / (true_positive + false_positive), 0)
    recall = (true_positive + false_negative != 0).if_else(true_positive / (true_positive + false_negative), 0)

    return precision, recall


# -------------------------------- UTILS --------------------------------

E = 2.71828


def exponential_matrix(matrix):
    e = cfix(E)
    matrix_exponentiated = matrix.same_shape()
    @for_range_opt(len(matrix))
    def _(i):
        @for_range_opt(len(matrix[0]))
        def _(j):
            matrix_exponentiated[i][j] = e**matrix[i][j]
            #matrix_exponentiated[i][j] = mpc_math.exp2_fx(matrix[i][j])
    return matrix_exponentiated

def log_1d(arr):
    log_1d_arr = arr.same_shape()
    @for_range_opt(len(arr))
    def _(i):
        log_1d_arr[i] = mpc_math.log_fx(arr[i], E)
    return log_1d_arr

def log_2d(matrix):
    log_2d_matrix = matrix.same_shape()
    @for_range_opt(len(matrix))
    def _(i):
        @for_range_opt(len(matrix[0]))
        def _(j):
            log_2d_matrix[i][j] = mpc_math.log_fx(matrix[i][j], E)
    return log_2d_matrix

# Arrays creation

def zeros_by_array(array):
    return array.same_shape().assign_all(0.0)

def zeros_1d_by_shape(length):
    array = Array(length, sfix)
    return array.assign_all(0.0)

def zeros_2d_by_shape(rows, columns):
    matrix = Matrix(rows, columns, sfix)
    return matrix.assign_all(0.0)

def zeros_3d_by_shape(a,b,c):
    matrix = MultiArray([a,b,c], sfix)
    return matrix.assign_all(0.0)

def zeros_4d_by_shape(a,b,c,d):
    matrix = MultiArray([a,b,c,d], sfix)
    return matrix.assign_all(0.0)

# Array operations

def subtract_from_1d_array(arr, value):
    result = arr.same_shape()
    @for_range_opt(len(arr))
    def _(i):
        result[i] = result[i] - value
    return result

def add_scalar_to_2d_matrix(matrix, scalar):
    result_matrix = matrix.same_shape()
    @for_range_opt(len(matrix))
    def _(i):
        @for_range_opt(len(matrix[0]))
        def _(j):
            result_matrix[i][j] = matrix[i][j]+scalar
    return result_matrix

def multiply_2d_matrix_by_scalar(matrix, scalar):
    result_matrix = matrix.same_shape()
    @for_range_opt(len(matrix))
    def _(i):
        @for_range_opt(len(matrix[0]))
        def _(j):
            result_matrix[i][j] = matrix[i][j]*scalar
    return result_matrix

def multiply_4d_matrix_by_scalar(matrix, scalar):
    result_matrix = matrix.same_shape()
    @for_range_opt(len(matrix))
    def _(i):
        @for_range_opt(len(matrix[0]))
        def _(j):
            @for_range_opt(len(matrix[0][0]))
            def _(k):
                @for_range_opt(len(matrix[0][0][0]))
                def _(l):
                    result_matrix[i][j][k][l] = matrix[i][j][k][l]*scalar
    return result_matrix

def divide_2d_matrix_by_scalar(matrix, scalar):
    result_matrix = matrix.same_shape()
    @for_range_opt(len(matrix))
    def _(i):
        @for_range_opt(len(matrix[0]))
        def _(j):
            result_matrix[i][j] = matrix[i][j]/scalar
    return result_matrix

def divide_4d_matrix_by_scalar(matrix, scalar):
    result_matrix = matrix.same_shape()
    @for_range_opt(len(matrix))
    def _(i):
        @for_range_opt(len(matrix[0]))
        def _(j):
            @for_range_opt(len(matrix[0][0]))
            def _(k):
                @for_range_opt(len(matrix[0][0][0]))
                def _(l):
                    result_matrix[i][j][k][l] = matrix[i][j][k][l]/scalar # TODO: Can we use list comprehensions?
    return result_matrix

def equal_scalar(array, scalar):
    is_equal = array.same_shape()
    @for_range_opt(len(array))
    def _(i):
        is_equal[i] = (array[i]==scalar).if_else(1, 0)
    return is_equal

def sum_of_equal_scalar(arr, value):
    count = Array(len(arr)+1, sint)
    count[0] = sint(0)
    @for_range_opt(len(arr))
    def _(i):
        count[i+1] =  count[i] + (arr[i] == value).if_else(1, 0)
    return count[len(arr)]

def negative_array(array):
    negative = array.same_shape()
    @for_range_opt(len(arr))
    def _(i):
        negative[i] = array[i] * -1
    return negative

def negative_matrix(matrix):
    negative = matrix.same_shape()
    @for_range_opt(len(matrix))
    def _(i):
        @for_range_opt(len(matrix[0]))
        def _(j):
            negative[i][j] = matrix[i][j] * -1
    return negative

def compute_max_from_array(arr):
    length = arr.length
    max_value = Array(length+1, sfix)
    max_value[0] = sfix(-16383)
    @for_range_opt(length)
    def _(j):
        max_value[j+1] = (max_value[j]>arr[j]).if_else(max_value[j], arr[j])
    return max_value[length]

def compute_max_from_matrix(matrix):
    max_value = Array(len(matrix)*len(matrix[0])+1, sfix)
    max_value[0] = sfix(-16383)
    @for_range_opt(len(matrix))
    def _(i):
        @for_range_opt(len(matrix[0]))
        def _(j):
            max_value[i*len(matrix) + j+1] = (max_value[i*len(matrix)+j]>matrix[i][j]).if_else(max_value[i*len(matrix)+j], matrix[i][j])
    return max_value[len(matrix)*len(matrix[0])]




def cantor(x, y):
    return (x + y) * (x + y + 1) * cfix(0.5) + y


def extract_columns(X_view, i, j):
    length = len(X_view)
    column_i = Array(length, sfix)
    column_j = Array(length, sfix)

    @for_range(length)
    def _(index):
        column_i[index] = X_view[index][i]
        column_j[index] = X_view[index][j]

    return column_i, column_j

def dot_product_matrix(x, y):
    dp = Array(len(x)+1, sfix)
    dp[0] = sfix(0)
    @for_range_opt(len(x))
    def _(i):
        dp[i+1] = dp[i] + sfix.dot_product(x[i], y[i])
    return dp[len(x)]

def dot_product(x, y):
    return sfix.dot_product(x,y)

# -------------------------------- EFC --------------------------------

def site_freq(X_view, psdcounts, max_bin):
    n_attr = len(X_view[1]) # total feature
    sitefreq = zeros_2d_by_shape(n_attr, max_bin)
    X_view_trans = X_view.transpose()

    @for_range(n_attr)
    def f(i):
        @for_range(max_bin)
        def h(aa):
            sitefreq[i][aa] = sum_of_equal_scalar(X_view_trans[i], aa)

    sitefreq = divide_2d_matrix_by_scalar(sitefreq, len(X_view))
    sitefreq = multiply_2d_matrix_by_scalar(sitefreq, 1-psdcounts)
    addition = psdcounts / max_bin
    return add_scalar_to_2d_matrix(sitefreq, addition)

def pair_freq(X_view, sitefreq_view, psdcounts, max_bin):
    n_inst, n_attr = len(X_view), len(X_view[1])
    pairfreq = zeros_4d_by_shape(n_attr, max_bin, n_attr, max_bin)

    @for_range_opt(n_attr)
    def _(i):
        @for_range_opt(n_attr)
        def _(j):
            x, y = extract_columns(X_view, i, j)
            arr_len = x.length

            @for_range_opt(arr_len)
            def _(k):
                found_duplicate = sint(0)
                occurence = sint(1)
                cantor_k = cantor(x[k], y[k])

                for l in range(arr_len):
                    cantors_are_equal = cantor_k == cantor(x[l], y[l])
                    found_duplicate = ((cantors_are_equal + (l < k)) == 2).if_else(1, found_duplicate)
                    occurence += ((cantors_are_equal + (l > k)) == 2).if_else(1, 0)

                @for_range_opt(max_bin)
                def _(ai):
                    @for_range_opt(max_bin)
                    def _(aj):
                        pairfreq[i][ai][j][aj] = (((found_duplicate == 0) + (ai == X_view[k][i]) + (aj == X_view[k][j])) == 3).if_else(occurence, pairfreq[i][ai][j][aj])


    pairfreq = divide_4d_matrix_by_scalar(pairfreq, n_inst)
    pairfreq = multiply_4d_matrix_by_scalar(pairfreq, 1-psdcounts)
    pairfreq += sfix(psdcounts / (max_bin ** 2))


    @for_range_opt(n_attr)
    def _(i):
        @for_range_opt(max_bin)
        def _(j):
            @for_range_opt(n_attr)
            def _(k):
                @for_range_opt(max_bin)
                def _(l):
                    pairfreq[i][j][k][l] = (((j == l) + (i == k)) == 2).if_else(sitefreq_view[i][j], pairfreq[i][j][k][l])
                    pairfreq[i][j][k][l] = (((j != l) + (i == k)) == 2).if_else(0.0, pairfreq[i][j][k][l])

    return pairfreq

def coupling(pairfreq_view, sitefreq_view, psdcounts, max_bin):
    n_attr = len(sitefreq_view)
    corr_matrix = zeros_2d_by_shape(n_attr * (max_bin - 1), n_attr * (max_bin - 1))

    @for_range_opt(n_attr)
    def _(i):
        @for_range_opt(n_attr)
        def _(j):
            @for_range_opt(max_bin-1)
            def _(ai):
                @for_range_opt(max_bin-1)
                def _(aj):
                    corr_matrix[i * (max_bin - 1) + ai][j * (max_bin - 1) + aj] = (
                            pairfreq_view[i][ai][j][aj] - sitefreq_view[i][ai] * sitefreq_view[j][aj])
    print_ln("Corr_matrix %s", corr_matrix.reveal())
    inv_corr = ml.mr(corr_matrix, 10)
    neg_matrix = negative_matrix(inv_corr)
    exp_matrix = exponential_matrix(neg_matrix)

    return exp_matrix

def local_fields(coupling_view, pairfreq_view, sitefreq_view, psdcounts, max_bin):
    n_inst = len(sitefreq_view)
    fields = Array(n_inst * (max_bin - 1), sfix)

    @for_range_opt(n_inst)
    def _(i):
        @for_range_opt(max_bin - 1)
        def _(ai):
            idx = i * (max_bin - 1) + ai
            fields[idx] = sitefreq_view[i][ai] / sitefreq_view[i][max_bin - 1]
            @for_range_opt(n_inst)
            def _(j):
                @for_range_opt(max_bin - 1)
                def _(aj):
                    fields[idx] /= (coupling_view[idx][j * (max_bin - 1) + aj] ** sitefreq_view[j][aj])
    return fields


def compute_energy(X, coupling_matrix, local_fields, max_bin):
    n_inst, n_attr = len(X), len(X[0])
    energies = zeros_1d_by_shape(n_inst)

    #print_ln("coupling_matrix: %s", coupling_matrix.reveal())
    #print_ln("local_fields: %s", local_fields.reveal())


    @for_range_opt(n_inst)
    def _(i):
        matrix_selector1 = zeros_1d_by_shape(len(local_fields))
        matrix_selector2 = zeros_2d_by_shape(len(coupling_matrix), len(coupling_matrix[0]))

        @for_range_opt(n_attr)
        def _(j):
            j_value = X[i][j]
            is_j_value = (j_value != (max_bin-1)).if_else(1, 0)

            @for_range_opt(j, n_attr)
            def _(k):
                k_value = (is_j_value == 0).if_else(max_bin-1, X[i][k])
                is_k_value = (k_value != (max_bin-1)).if_else(1,0)

                @for_range_opt(len(coupling_matrix))
                def _(l):
                    @for_range_opt(len(coupling_matrix[0]))
                    def _(m):
                        condition1 = (l==(j * (max_bin - 1) + j_value)).if_else(1,0)
                        condition2 = (m==(k * (max_bin - 1) + k_value)).if_else(1,0)
                        condition3 = (is_k_value == 1).if_else(1,0)
                        matrix_selector2[l][m] = ((condition1 + condition2 + condition3) == 3).if_else(1,matrix_selector2[l][m])

            @for_range_opt(len(local_fields))
            def _(k):
                condition1 = (k == (j * (max_bin - 1) + j_value)).if_else(1,0)
                condition2 = (is_j_value == 1).if_else(1,0)
                matrix_selector1[k] = (condition1 + condition2==2).if_else(1, matrix_selector1[k])

        energies[i] -= dot_product_matrix(coupling_matrix, matrix_selector2)
        energies[i] -= dot_product(local_fields, matrix_selector1)

    #print_ln("energies: %s", energies.reveal())
    return energies

def fit(X, pseudocounts, max_bin):
    sitefreq = site_freq(X, pseudocounts, max_bin)
    pairfreq = pair_freq(X,sitefreq, pseudocounts, max_bin)
    coupling_matrix = coupling(pairfreq, sitefreq, pseudocounts, max_bin)
    localfields = local_fields(coupling_matrix, pairfreq, sitefreq, pseudocounts, max_bin)
    coupling_matrix = log_2d(coupling_matrix)
    localfields = log_1d(localfields)

    cutoff = define_cutoff(X, 0.95, coupling_matrix, localfields, max_bin)
    print_ln("cutoff: %s", cutoff.reveal())
    return coupling_matrix, localfields, cutoff

def define_cutoff(X, cutoff_quantile, coupling_matrix, local_fields, max_bin):
    energies = compute_energy(X, coupling_matrix, local_fields, max_bin)
    energies.sort()
    return energies[int(len(energies) * cutoff_quantile)]

def predict(X, coupling_matrix, localfields, cutoff, max_bin):
        energies = compute_energy(X, coupling_matrix, localfields, max_bin)

        y_pred = Array(len(X), cint)

        for row in range(len(X)):
            # Compute minimum energy in a row
            min_energy = sfix(1683.0)  # Initialize min_energy to positive infinity,
            for i in range(len(energies)):
                current_energy = energies[row]
                current_energy = sfix(current_energy)
                min_energy = (current_energy < min_energy).if_else(current_energy, min_energy)

            result = (min_energy < cutoff).if_else(0,1) # See if min_energy is below cutoff (non malicious) or above (malicious)
            y_pred[row] = result.reveal()

        return y_pred



# -------------------------------- TEST --------------------------------


def data_preprocessing():
    X_train = pd.read_csv("Programs/Source/MPC-EFC/data/small/train.csv")
    X_test = pd.read_csv("Programs/Source/MPC-EFC/data/small/test.csv")

    y_train = X_train["target"].values.tolist()
    y_test = X_test["target"].values.tolist()

    X_train = X_train.drop(columns=["target"]).values.tolist()
    X_test = X_test.drop(columns=["target"]).values.tolist()

    max_bin = max(max(max(row) for row in X_train), max(max(row) for row in X_test)) + 1

    n_attr = len(X_train[0])
    local_fields_shape = n_attr * (max_bin - 1)
    coupling_matrix_shape = n_attr * (max_bin - 1)
    return X_train, X_test, y_train, y_test, local_fields_shape, coupling_matrix_shape, max_bin

def test_training_phase(X_train, X_test, y_train, y_test, max_bin, local_fields_shape, coupling_matrix_shape):
    X_train = sint.input_tensor_via(0, X_train)

    coupling_matrix, localfields, cutoff = fit(X_train, 0.5, max_bin)

    # Save the classifier info to file
    cutoff_arr = Array(1, sfix)
    cutoff_arr[0] = cutoff
    cutoff_arr.write_to_file(position = 0)
    coupling_matrix.write_to_file(position = 1)

    localfields.write_to_file(position = (1+(coupling_matrix_shape * coupling_matrix_shape)))

    #print_ln("%s cutoff orig", cutoff.reveal())
    #print_ln("%s couplong", coupling_matrix.reveal())
    #print_ln("%s localfields", localfields.reveal())


def test_inference_phase(X_train, X_test, y_train, y_test, max_bin, local_fields_shape, coupling_matrix_shape):
    X_test = sint.input_tensor_via(0, X_test)
    y_test = sint.input_tensor_via(0, y_test)


    coupling_matrix = Matrix(coupling_matrix_shape, coupling_matrix_shape, sfix)
    localfields = Array(local_fields_shape, sfix)

    cutoff_arr_presaved = Array(1, sfix)
    cutoff_arr_presaved.read_from_file(0)
    cutoff_presaved = cutoff_arr_presaved[0]
    coupling_matrix_presaved = Matrix(len(coupling_matrix), len(coupling_matrix[0]), sfix)
    coupling_matrix_presaved.read_from_file(1)
    localfields_presaved = Array(len(localfields), sfix)
    localfields_presaved.read_from_file(1+(len(coupling_matrix)*len(coupling_matrix[0])))

    #print_ln("%s cutoff presaved", cutoff_presaved.reveal())
    #print_ln("%s couplong presaved", coupling_matrix_presaved.reveal())
    #print_ln("%s localfields presaved", localfields_presaved.reveal())

    y_pred_presaved = predict(X_test, coupling_matrix_presaved, localfields_presaved, cutoff_presaved, max_bin)
    y_pred_presaved.print_reveal_nested()
    precision, recall = calculate_metrics(y_test, y_pred_presaved)

#----------------------------------- MAIN -----------------------------------

X_train, X_test, y_train, y_test, local_fields_shape, coupling_matrix_shape, max_bin = data_preprocessing()

start_timer(1)
test_training_phase(X_train, X_test, y_train, y_test, max_bin, local_fields_shape, coupling_matrix_shape)
stop_timer(1)
start_timer(2)
test_inference_phase(X_train, X_test, y_train, y_test, max_bin, local_fields_shape, coupling_matrix_shape)
stop_timer(2)
